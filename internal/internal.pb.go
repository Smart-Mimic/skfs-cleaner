// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.0
// source: internal/internal.proto

package internal

import (
	reflect "reflect"
	sync "sync"

	common "github.com/chirpstack/chirpstack/api/go/v4/common"
	gw "github.com/chirpstack/chirpstack/api/go/v4/gw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device address.
	DevAddr []byte `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// LoRaWAN mac-version.
	MacVersion common.MacVersion `protobuf:"varint,4,opt,name=mac_version,json=macVersion,proto3,enum=common.MacVersion" json:"mac_version,omitempty"`
	// FNwkSIntKey.
	FNwkSIntKey []byte `protobuf:"bytes,5,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// SNwkSIntKey.
	SNwkSIntKey []byte `protobuf:"bytes,6,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// NwkSEncKey.
	NwkSEncKey []byte `protobuf:"bytes,7,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// AppSKey envelope.
	AppSKey *common.KeyEnvelope `protobuf:"bytes,8,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
	// JS Session Key ID.
	JsSessionKeyId []byte `protobuf:"bytes,42,opt,name=js_session_key_id,json=jsSessionKeyId,proto3" json:"js_session_key_id,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,9,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// Downlink frame-counter (ns).
	NFCntDown uint32 `protobuf:"varint,10,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// Downlink frame-counter (as).
	AFCntDown uint32 `protobuf:"varint,11,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
	// Frame-counter holding the last confirmed downlink frame (n_f_cnt_down or
	// a_f_cnt_down).
	ConfFCnt uint32 `protobuf:"varint,12,opt,name=conf_f_cnt,json=confFCnt,proto3" json:"conf_f_cnt,omitempty"`
	// Skip uplink frame-counter validation.
	SkipFCntCheck bool `protobuf:"varint,13,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
	// RX1 delay.
	Rx1Delay uint32 `protobuf:"varint,14,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// RX1 data-rate offset.
	Rx1DrOffset uint32 `protobuf:"varint,15,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	// RX2 data-rate.
	Rx2Dr uint32 `protobuf:"varint,16,opt,name=rx2_dr,json=rx2Dr,proto3" json:"rx2_dr,omitempty"`
	// RX2 frequency.
	Rx2Frequency uint32 `protobuf:"varint,17,opt,name=rx2_frequency,json=rx2Frequency,proto3" json:"rx2_frequency,omitempty"`
	// Enabled uplink channels.
	EnabledUplinkChannelIndices []uint32 `protobuf:"varint,18,rep,packed,name=enabled_uplink_channel_indices,json=enabledUplinkChannelIndices,proto3" json:"enabled_uplink_channel_indices,omitempty"`
	// Extra user-defined uplink channels.
	ExtraUplinkChannels map[uint32]*DeviceSessionChannel `protobuf:"bytes,19,rep,name=extra_uplink_channels,json=extraUplinkChannels,proto3" json:"extra_uplink_channels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Class-B ping-slot data-rate.
	ClassBPingSlotDr uint32 `protobuf:"varint,20,opt,name=class_b_ping_slot_dr,json=classBPingSlotDr,proto3" json:"class_b_ping_slot_dr,omitempty"`
	// Class-B ping-slot frequency.
	ClassBPingSlotFreq uint32 `protobuf:"varint,21,opt,name=class_b_ping_slot_freq,json=classBPingSlotFreq,proto3" json:"class_b_ping_slot_freq,omitempty"`
	// Class-B ping-slot nb.
	ClassBPingSlotNb uint32 `protobuf:"varint,22,opt,name=class_b_ping_slot_nb,json=classBPingSlotNb,proto3" json:"class_b_ping_slot_nb,omitempty"`
	// Nb. transmissions.
	NbTrans uint32 `protobuf:"varint,23,opt,name=nb_trans,json=nbTrans,proto3" json:"nb_trans,omitempty"`
	// TXPowerIndex which the node is using. The possible values are defined
	// by the lorawan/band package and are region specific. By default it is
	// assumed that the node is using TXPower 0. This value is controlled by
	// the ADR engine.
	TxPowerIndex uint32 `protobuf:"varint,24,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	// DR defines the (last known) data-rate at which the node is operating.
	// This value is controlled by the ADR engine.
	Dr uint32 `protobuf:"varint,25,opt,name=dr,proto3" json:"dr,omitempty"`
	// ADR defines if the device has ADR enabled.
	Adr bool `protobuf:"varint,26,opt,name=adr,proto3" json:"adr,omitempty"`
	// MaxSupportedTXPowerIndex defines the maximum supported tx-power index
	// by the node, or 0 when not set.
	MaxSupportedTxPowerIndex uint32 `protobuf:"varint,27,opt,name=max_supported_tx_power_index,json=maxSupportedTxPowerIndex,proto3" json:"max_supported_tx_power_index,omitempty"`
	// MinSupportedTXPowerIndex defines the minimum supported tx-power index
	// by the node (default 0).
	MinSupportedTxPowerIndex uint32 `protobuf:"varint,28,opt,name=min_supported_tx_power_index,json=minSupportedTxPowerIndex,proto3" json:"min_supported_tx_power_index,omitempty"`
	// Pending rejoin device-session contains a device-session which has not
	// yet been activated by the device (by sending a first uplink).
	PendingRejoinDeviceSession *DeviceSession `protobuf:"bytes,29,opt,name=pending_rejoin_device_session,json=pendingRejoinDeviceSession,proto3" json:"pending_rejoin_device_session,omitempty"`
	// Uplink history for ADR (last 20 uplink transmissions).
	// This table is reset in case one of parameters has changed:
	//   - DR
	//   - TxPower
	//   - NbTrans
	UplinkAdrHistory []*UplinkAdrHistory `protobuf:"bytes,30,rep,name=uplink_adr_history,json=uplinkAdrHistory,proto3" json:"uplink_adr_history,omitempty"`
	// Mac-command error count.
	MacCommandErrorCount map[uint32]uint32 `protobuf:"bytes,31,rep,name=mac_command_error_count,json=macCommandErrorCount,proto3" json:"mac_command_error_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Last device-status request.
	LastDeviceStatusRequest *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=last_device_status_request,json=lastDeviceStatusRequest,proto3" json:"last_device_status_request,omitempty"`
	// RejoinRequestEnabled defines if the rejoin-request is enabled on the
	// device.
	RejoinRequestEnabled bool `protobuf:"varint,33,opt,name=rejoin_request_enabled,json=rejoinRequestEnabled,proto3" json:"rejoin_request_enabled,omitempty"`
	// RejoinRequestMaxCountN defines the 2^(C+4) uplink message interval for
	// the rejoin-request.
	RejoinRequestMaxCountN uint32 `protobuf:"varint,34,opt,name=rejoin_request_max_count_n,json=rejoinRequestMaxCountN,proto3" json:"rejoin_request_max_count_n,omitempty"`
	// RejoinRequestMaxTimeN defines the 2^(T+10) time interval (seconds)
	// for the rejoin-request.
	RejoinRequestMaxTimeN uint32 `protobuf:"varint,35,opt,name=rejoin_request_max_time_n,json=rejoinRequestMaxTimeN,proto3" json:"rejoin_request_max_time_n,omitempty"`
	// Rejoin counter (RJCount0).
	// This counter is reset to 0 after each successful join-accept.
	RejoinCount_0 uint32 `protobuf:"varint,36,opt,name=rejoin_count_0,json=rejoinCount0,proto3" json:"rejoin_count_0,omitempty"`
	// Uplink dwell time.
	UplinkDwellTime_400Ms bool `protobuf:"varint,37,opt,name=uplink_dwell_time_400ms,json=uplinkDwellTime400ms,proto3" json:"uplink_dwell_time_400ms,omitempty"`
	// Downlink dwell time.
	DownlinkDwellTime_400Ms bool `protobuf:"varint,38,opt,name=downlink_dwell_time_400ms,json=downlinkDwellTime400ms,proto3" json:"downlink_dwell_time_400ms,omitempty"`
	// Uplink max. EIRP index.
	UplinkMaxEirpIndex uint32 `protobuf:"varint,39,opt,name=uplink_max_eirp_index,json=uplinkMaxEirpIndex,proto3" json:"uplink_max_eirp_index,omitempty"`
	// Region configuration ID.
	RegionConfigId string `protobuf:"bytes,40,opt,name=region_config_id,json=regionConfigId,proto3" json:"region_config_id,omitempty"`
	// Relay state.
	Relay *Relay `protobuf:"bytes,41,opt,name=relay,proto3" json:"relay,omitempty"`
}

func (x *DeviceSession) Reset() {
	*x = DeviceSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSession) ProtoMessage() {}

func (x *DeviceSession) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSession.ProtoReflect.Descriptor instead.
func (*DeviceSession) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSession) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceSession) GetMacVersion() common.MacVersion {
	if x != nil {
		return x.MacVersion
	}
	return common.MacVersion(0)
}

func (x *DeviceSession) GetFNwkSIntKey() []byte {
	if x != nil {
		return x.FNwkSIntKey
	}
	return nil
}

func (x *DeviceSession) GetSNwkSIntKey() []byte {
	if x != nil {
		return x.SNwkSIntKey
	}
	return nil
}

func (x *DeviceSession) GetNwkSEncKey() []byte {
	if x != nil {
		return x.NwkSEncKey
	}
	return nil
}

func (x *DeviceSession) GetAppSKey() *common.KeyEnvelope {
	if x != nil {
		return x.AppSKey
	}
	return nil
}

func (x *DeviceSession) GetJsSessionKeyId() []byte {
	if x != nil {
		return x.JsSessionKeyId
	}
	return nil
}

func (x *DeviceSession) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceSession) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceSession) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DeviceSession) GetConfFCnt() uint32 {
	if x != nil {
		return x.ConfFCnt
	}
	return 0
}

func (x *DeviceSession) GetSkipFCntCheck() bool {
	if x != nil {
		return x.SkipFCntCheck
	}
	return false
}

func (x *DeviceSession) GetRx1Delay() uint32 {
	if x != nil {
		return x.Rx1Delay
	}
	return 0
}

func (x *DeviceSession) GetRx1DrOffset() uint32 {
	if x != nil {
		return x.Rx1DrOffset
	}
	return 0
}

func (x *DeviceSession) GetRx2Dr() uint32 {
	if x != nil {
		return x.Rx2Dr
	}
	return 0
}

func (x *DeviceSession) GetRx2Frequency() uint32 {
	if x != nil {
		return x.Rx2Frequency
	}
	return 0
}

func (x *DeviceSession) GetEnabledUplinkChannelIndices() []uint32 {
	if x != nil {
		return x.EnabledUplinkChannelIndices
	}
	return nil
}

func (x *DeviceSession) GetExtraUplinkChannels() map[uint32]*DeviceSessionChannel {
	if x != nil {
		return x.ExtraUplinkChannels
	}
	return nil
}

func (x *DeviceSession) GetClassBPingSlotDr() uint32 {
	if x != nil {
		return x.ClassBPingSlotDr
	}
	return 0
}

func (x *DeviceSession) GetClassBPingSlotFreq() uint32 {
	if x != nil {
		return x.ClassBPingSlotFreq
	}
	return 0
}

func (x *DeviceSession) GetClassBPingSlotNb() uint32 {
	if x != nil {
		return x.ClassBPingSlotNb
	}
	return 0
}

func (x *DeviceSession) GetNbTrans() uint32 {
	if x != nil {
		return x.NbTrans
	}
	return 0
}

func (x *DeviceSession) GetTxPowerIndex() uint32 {
	if x != nil {
		return x.TxPowerIndex
	}
	return 0
}

func (x *DeviceSession) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *DeviceSession) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *DeviceSession) GetMaxSupportedTxPowerIndex() uint32 {
	if x != nil {
		return x.MaxSupportedTxPowerIndex
	}
	return 0
}

func (x *DeviceSession) GetMinSupportedTxPowerIndex() uint32 {
	if x != nil {
		return x.MinSupportedTxPowerIndex
	}
	return 0
}

func (x *DeviceSession) GetPendingRejoinDeviceSession() *DeviceSession {
	if x != nil {
		return x.PendingRejoinDeviceSession
	}
	return nil
}

func (x *DeviceSession) GetUplinkAdrHistory() []*UplinkAdrHistory {
	if x != nil {
		return x.UplinkAdrHistory
	}
	return nil
}

func (x *DeviceSession) GetMacCommandErrorCount() map[uint32]uint32 {
	if x != nil {
		return x.MacCommandErrorCount
	}
	return nil
}

func (x *DeviceSession) GetLastDeviceStatusRequest() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeviceStatusRequest
	}
	return nil
}

func (x *DeviceSession) GetRejoinRequestEnabled() bool {
	if x != nil {
		return x.RejoinRequestEnabled
	}
	return false
}

func (x *DeviceSession) GetRejoinRequestMaxCountN() uint32 {
	if x != nil {
		return x.RejoinRequestMaxCountN
	}
	return 0
}

func (x *DeviceSession) GetRejoinRequestMaxTimeN() uint32 {
	if x != nil {
		return x.RejoinRequestMaxTimeN
	}
	return 0
}

func (x *DeviceSession) GetRejoinCount_0() uint32 {
	if x != nil {
		return x.RejoinCount_0
	}
	return 0
}

func (x *DeviceSession) GetUplinkDwellTime_400Ms() bool {
	if x != nil {
		return x.UplinkDwellTime_400Ms
	}
	return false
}

func (x *DeviceSession) GetDownlinkDwellTime_400Ms() bool {
	if x != nil {
		return x.DownlinkDwellTime_400Ms
	}
	return false
}

func (x *DeviceSession) GetUplinkMaxEirpIndex() uint32 {
	if x != nil {
		return x.UplinkMaxEirpIndex
	}
	return 0
}

func (x *DeviceSession) GetRegionConfigId() string {
	if x != nil {
		return x.RegionConfigId
	}
	return ""
}

func (x *DeviceSession) GetRelay() *Relay {
	if x != nil {
		return x.Relay
	}
	return nil
}

type UplinkAdrHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uplink frame-counter.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Max SNR (of deduplicated frames received by one or multiple gateways).
	MaxSnr float32 `protobuf:"fixed32,2,opt,name=max_snr,json=maxSnr,proto3" json:"max_snr,omitempty"`
	// Max RSSI.
	MaxRssi int32 `protobuf:"varint,5,opt,name=max_rssi,json=maxRssi,proto3" json:"max_rssi,omitempty"`
	// TX Power (as known by the network-server).
	TxPowerIndex uint32 `protobuf:"varint,3,opt,name=tx_power_index,json=txPowerIndex,proto3" json:"tx_power_index,omitempty"`
	// Number of receiving gateways.
	GatewayCount uint32 `protobuf:"varint,4,opt,name=gateway_count,json=gatewayCount,proto3" json:"gateway_count,omitempty"`
}

func (x *UplinkAdrHistory) Reset() {
	*x = UplinkAdrHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkAdrHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkAdrHistory) ProtoMessage() {}

func (x *UplinkAdrHistory) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkAdrHistory.ProtoReflect.Descriptor instead.
func (*UplinkAdrHistory) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{1}
}

func (x *UplinkAdrHistory) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *UplinkAdrHistory) GetMaxSnr() float32 {
	if x != nil {
		return x.MaxSnr
	}
	return 0
}

func (x *UplinkAdrHistory) GetMaxRssi() int32 {
	if x != nil {
		return x.MaxRssi
	}
	return 0
}

func (x *UplinkAdrHistory) GetTxPowerIndex() uint32 {
	if x != nil {
		return x.TxPowerIndex
	}
	return 0
}

func (x *UplinkAdrHistory) GetGatewayCount() uint32 {
	if x != nil {
		return x.GatewayCount
	}
	return 0
}

type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Devices provisioned on the relay.
	Devices []*RelayDevice `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Filter list.
	Filters []*RelayFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// Relay is enabled.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// CAD periodicity.
	CadPeriodicity uint32 `protobuf:"varint,4,opt,name=cad_periodicity,json=cadPeriodicity,proto3" json:"cad_periodicity,omitempty"`
	// Default channel index.
	DefaultChannelIndex uint32 `protobuf:"varint,5,opt,name=default_channel_index,json=defaultChannelIndex,proto3" json:"default_channel_index,omitempty"`
	// Second channel freq.
	SecondChannelFreq uint32 `protobuf:"varint,6,opt,name=second_channel_freq,json=secondChannelFreq,proto3" json:"second_channel_freq,omitempty"`
	// Second channel DR.
	SecondChannelDr uint32 `protobuf:"varint,7,opt,name=second_channel_dr,json=secondChannelDr,proto3" json:"second_channel_dr,omitempty"`
	// Second channel ACK offset.
	SecondChannelAckOffset uint32 `protobuf:"varint,8,opt,name=second_channel_ack_offset,json=secondChannelAckOffset,proto3" json:"second_channel_ack_offset,omitempty"`
	// End-device activation mode.
	EdActivationMode uint32 `protobuf:"varint,9,opt,name=ed_activation_mode,json=edActivationMode,proto3" json:"ed_activation_mode,omitempty"`
	// End-device smart-enable level.
	EdSmartEnableLevel uint32 `protobuf:"varint,10,opt,name=ed_smart_enable_level,json=edSmartEnableLevel,proto3" json:"ed_smart_enable_level,omitempty"`
	// End-device back-off.
	EdBackOff uint32 `protobuf:"varint,11,opt,name=ed_back_off,json=edBackOff,proto3" json:"ed_back_off,omitempty"`
	// Join-request limit reload rate.
	JoinReqLimitReloadRate uint32 `protobuf:"varint,12,opt,name=join_req_limit_reload_rate,json=joinReqLimitReloadRate,proto3" json:"join_req_limit_reload_rate,omitempty"`
	// Notify limit reload rate.
	NotifyLimitReloadRate uint32 `protobuf:"varint,13,opt,name=notify_limit_reload_rate,json=notifyLimitReloadRate,proto3" json:"notify_limit_reload_rate,omitempty"`
	// Global uplink limit reload rate.
	GlobalUplinkLimitReloadRate uint32 `protobuf:"varint,14,opt,name=global_uplink_limit_reload_rate,json=globalUplinkLimitReloadRate,proto3" json:"global_uplink_limit_reload_rate,omitempty"`
	// Overall limit reload rate.
	OverallLimitReloadRate uint32 `protobuf:"varint,15,opt,name=overall_limit_reload_rate,json=overallLimitReloadRate,proto3" json:"overall_limit_reload_rate,omitempty"`
	// Join-request limit bucket size.
	JoinReqLimitBucketSize uint32 `protobuf:"varint,16,opt,name=join_req_limit_bucket_size,json=joinReqLimitBucketSize,proto3" json:"join_req_limit_bucket_size,omitempty"`
	// Notify limit bucket size.
	NotifyLimitBucketSize uint32 `protobuf:"varint,17,opt,name=notify_limit_bucket_size,json=notifyLimitBucketSize,proto3" json:"notify_limit_bucket_size,omitempty"`
	// Global uplink limit bucket size.
	GlobalUplinkLimitBucketSize uint32 `protobuf:"varint,18,opt,name=global_uplink_limit_bucket_size,json=globalUplinkLimitBucketSize,proto3" json:"global_uplink_limit_bucket_size,omitempty"`
	// Overall limit bucket size.
	OverallLimitBucketSize uint32 `protobuf:"varint,19,opt,name=overall_limit_bucket_size,json=overallLimitBucketSize,proto3" json:"overall_limit_bucket_size,omitempty"`
	// End-device must communicate through relay only.
	// This is stored in the device-session as we need to validate on retrieving
	// the device-session.
	EdRelayOnly bool `protobuf:"varint,20,opt,name=ed_relay_only,json=edRelayOnly,proto3" json:"ed_relay_only,omitempty"`
	// End-device WFCnt.
	// This holds the last known WFCnt value. ChirpStack will periodically read
	// this value from the Relay.
	WFCnt uint32 `protobuf:"varint,21,opt,name=w_f_cnt,json=wFCnt,proto3" json:"w_f_cnt,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{2}
}

func (x *Relay) GetDevices() []*RelayDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Relay) GetFilters() []*RelayFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Relay) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Relay) GetCadPeriodicity() uint32 {
	if x != nil {
		return x.CadPeriodicity
	}
	return 0
}

func (x *Relay) GetDefaultChannelIndex() uint32 {
	if x != nil {
		return x.DefaultChannelIndex
	}
	return 0
}

func (x *Relay) GetSecondChannelFreq() uint32 {
	if x != nil {
		return x.SecondChannelFreq
	}
	return 0
}

func (x *Relay) GetSecondChannelDr() uint32 {
	if x != nil {
		return x.SecondChannelDr
	}
	return 0
}

func (x *Relay) GetSecondChannelAckOffset() uint32 {
	if x != nil {
		return x.SecondChannelAckOffset
	}
	return 0
}

func (x *Relay) GetEdActivationMode() uint32 {
	if x != nil {
		return x.EdActivationMode
	}
	return 0
}

func (x *Relay) GetEdSmartEnableLevel() uint32 {
	if x != nil {
		return x.EdSmartEnableLevel
	}
	return 0
}

func (x *Relay) GetEdBackOff() uint32 {
	if x != nil {
		return x.EdBackOff
	}
	return 0
}

func (x *Relay) GetJoinReqLimitReloadRate() uint32 {
	if x != nil {
		return x.JoinReqLimitReloadRate
	}
	return 0
}

func (x *Relay) GetNotifyLimitReloadRate() uint32 {
	if x != nil {
		return x.NotifyLimitReloadRate
	}
	return 0
}

func (x *Relay) GetGlobalUplinkLimitReloadRate() uint32 {
	if x != nil {
		return x.GlobalUplinkLimitReloadRate
	}
	return 0
}

func (x *Relay) GetOverallLimitReloadRate() uint32 {
	if x != nil {
		return x.OverallLimitReloadRate
	}
	return 0
}

func (x *Relay) GetJoinReqLimitBucketSize() uint32 {
	if x != nil {
		return x.JoinReqLimitBucketSize
	}
	return 0
}

func (x *Relay) GetNotifyLimitBucketSize() uint32 {
	if x != nil {
		return x.NotifyLimitBucketSize
	}
	return 0
}

func (x *Relay) GetGlobalUplinkLimitBucketSize() uint32 {
	if x != nil {
		return x.GlobalUplinkLimitBucketSize
	}
	return 0
}

func (x *Relay) GetOverallLimitBucketSize() uint32 {
	if x != nil {
		return x.OverallLimitBucketSize
	}
	return 0
}

func (x *Relay) GetEdRelayOnly() bool {
	if x != nil {
		return x.EdRelayOnly
	}
	return false
}

func (x *Relay) GetWFCnt() uint32 {
	if x != nil {
		return x.WFCnt
	}
	return 0
}

type RelayDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index (used for filter and uplink filters).
	// This must be between 0 - 15.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// JoinEUI (EUI64).
	JoinEui []byte `protobuf:"bytes,2,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// DevEUI (EUI64).
	DevEui []byte `protobuf:"bytes,3,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// DevAddr.
	DevAddr []byte `protobuf:"bytes,4,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// RootWorSKey.
	RootWorSKey []byte `protobuf:"bytes,5,opt,name=root_wor_s_key,json=rootWorSKey,proto3" json:"root_wor_s_key,omitempty"`
	// Provisioned.
	Provisioned bool `protobuf:"varint,6,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
	// Uplink limit bucket size.
	UplinkLimitBucketSize uint32 `protobuf:"varint,7,opt,name=uplink_limit_bucket_size,json=uplinkLimitBucketSize,proto3" json:"uplink_limit_bucket_size,omitempty"`
	// Uplink limit reload rate.
	UplinkLimitReloadRate uint32 `protobuf:"varint,8,opt,name=uplink_limit_reload_rate,json=uplinkLimitReloadRate,proto3" json:"uplink_limit_reload_rate,omitempty"`
	// Timestamp of the last WFCnt request.
	// Note that ChirpStack periodically requests the WFCnt from the relay.
	WFCntLastRequest *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=w_f_cnt_last_request,json=wFCntLastRequest,proto3" json:"w_f_cnt_last_request,omitempty"`
}

func (x *RelayDevice) Reset() {
	*x = RelayDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayDevice) ProtoMessage() {}

func (x *RelayDevice) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayDevice.ProtoReflect.Descriptor instead.
func (*RelayDevice) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{3}
}

func (x *RelayDevice) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RelayDevice) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *RelayDevice) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *RelayDevice) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *RelayDevice) GetRootWorSKey() []byte {
	if x != nil {
		return x.RootWorSKey
	}
	return nil
}

func (x *RelayDevice) GetProvisioned() bool {
	if x != nil {
		return x.Provisioned
	}
	return false
}

func (x *RelayDevice) GetUplinkLimitBucketSize() uint32 {
	if x != nil {
		return x.UplinkLimitBucketSize
	}
	return 0
}

func (x *RelayDevice) GetUplinkLimitReloadRate() uint32 {
	if x != nil {
		return x.UplinkLimitReloadRate
	}
	return 0
}

func (x *RelayDevice) GetWFCntLastRequest() *timestamppb.Timestamp {
	if x != nil {
		return x.WFCntLastRequest
	}
	return nil
}

type RelayFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index.
	// This must be between 0 - 15.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Action.
	//   - 0: No Rule
	//   - 1: Forward
	//   - 2: Filter
	Action uint32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	// DevEUI (EUI64).
	DevEui []byte `protobuf:"bytes,3,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// JoinEUI (EUI64).
	JoinEui []byte `protobuf:"bytes,4,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Provisioned.
	Provisioned bool `protobuf:"varint,5,opt,name=provisioned,proto3" json:"provisioned,omitempty"`
}

func (x *RelayFilter) Reset() {
	*x = RelayFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayFilter) ProtoMessage() {}

func (x *RelayFilter) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayFilter.ProtoReflect.Descriptor instead.
func (*RelayFilter) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{4}
}

func (x *RelayFilter) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RelayFilter) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *RelayFilter) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *RelayFilter) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *RelayFilter) GetProvisioned() bool {
	if x != nil {
		return x.Provisioned
	}
	return false
}

type DeviceSessionChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency Hz.
	Frequency uint32 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Min. data-rate.
	MinDr uint32 `protobuf:"varint,2,opt,name=min_dr,json=minDr,proto3" json:"min_dr,omitempty"`
	// Max. data-rate.
	MaxDr uint32 `protobuf:"varint,3,opt,name=max_dr,json=maxDr,proto3" json:"max_dr,omitempty"`
}

func (x *DeviceSessionChannel) Reset() {
	*x = DeviceSessionChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionChannel) ProtoMessage() {}

func (x *DeviceSessionChannel) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionChannel.ProtoReflect.Descriptor instead.
func (*DeviceSessionChannel) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceSessionChannel) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *DeviceSessionChannel) GetMinDr() uint32 {
	if x != nil {
		return x.MinDr
	}
	return 0
}

func (x *DeviceSessionChannel) GetMaxDr() uint32 {
	if x != nil {
		return x.MaxDr
	}
	return 0
}

type DeviceGatewayRxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI (EUI64).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,2,opt,name=dr,proto3" json:"dr,omitempty"`
	// Gateway RxInfo elements.
	Items []*DeviceGatewayRxInfoItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *DeviceGatewayRxInfo) Reset() {
	*x = DeviceGatewayRxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayRxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayRxInfo) ProtoMessage() {}

func (x *DeviceGatewayRxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayRxInfo.ProtoReflect.Descriptor instead.
func (*DeviceGatewayRxInfo) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceGatewayRxInfo) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DeviceGatewayRxInfo) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *DeviceGatewayRxInfo) GetItems() []*DeviceGatewayRxInfoItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type DeviceGatewayRxInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (EUI64).
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,2,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// LoRa SNR.
	LoraSnr float32 `protobuf:"fixed32,3,opt,name=lora_snr,json=loraSnr,proto3" json:"lora_snr,omitempty"`
	// Antenna.
	Antenna uint32 `protobuf:"varint,4,opt,name=antenna,proto3" json:"antenna,omitempty"`
	// Board.
	Board uint32 `protobuf:"varint,5,opt,name=board,proto3" json:"board,omitempty"`
	// Context blob.
	Context []byte `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
	// Gateway is private (uplink).
	IsPrivateUp bool `protobuf:"varint,7,opt,name=is_private_up,json=isPrivateUp,proto3" json:"is_private_up,omitempty"`
	// Gateway is private (downlink).
	IsPrivateDown bool `protobuf:"varint,8,opt,name=is_private_down,json=isPrivateDown,proto3" json:"is_private_down,omitempty"`
	// Tenant ID (UUID).
	TenantId []byte `protobuf:"bytes,9,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DeviceGatewayRxInfoItem) Reset() {
	*x = DeviceGatewayRxInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayRxInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayRxInfoItem) ProtoMessage() {}

func (x *DeviceGatewayRxInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayRxInfoItem.ProtoReflect.Descriptor instead.
func (*DeviceGatewayRxInfoItem) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceGatewayRxInfoItem) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *DeviceGatewayRxInfoItem) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *DeviceGatewayRxInfoItem) GetLoraSnr() float32 {
	if x != nil {
		return x.LoraSnr
	}
	return 0
}

func (x *DeviceGatewayRxInfoItem) GetAntenna() uint32 {
	if x != nil {
		return x.Antenna
	}
	return 0
}

func (x *DeviceGatewayRxInfoItem) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *DeviceGatewayRxInfoItem) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DeviceGatewayRxInfoItem) GetIsPrivateUp() bool {
	if x != nil {
		return x.IsPrivateUp
	}
	return false
}

func (x *DeviceGatewayRxInfoItem) GetIsPrivateDown() bool {
	if x != nil {
		return x.IsPrivateDown
	}
	return false
}

func (x *DeviceGatewayRxInfoItem) GetTenantId() []byte {
	if x != nil {
		return x.TenantId
	}
	return nil
}

type DownlinkFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Downlink ID.
	DownlinkId uint32 `protobuf:"varint,1,opt,name=downlink_id,json=downlinkId,proto3" json:"downlink_id,omitempty"`
	// DevEUI.
	DevEui []byte `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device queue item ID.
	DeviceQueueItemId []byte `protobuf:"bytes,3,opt,name=device_queue_item_id,json=deviceQueueItemId,proto3" json:"device_queue_item_id,omitempty"`
	// Multicast Group ID.
	MulticastGroupId []byte `protobuf:"bytes,4,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
	// Multicast queue item ID.
	MulticastGroupQueueItemId []byte `protobuf:"bytes,5,opt,name=multicast_group_queue_item_id,json=multicastGroupQueueItemId,proto3" json:"multicast_group_queue_item_id,omitempty"`
	// Downlink frames.
	DownlinkFrame *gw.DownlinkFrame `protobuf:"bytes,6,opt,name=downlink_frame,json=downlinkFrame,proto3" json:"downlink_frame,omitempty"`
	// Encrypted FOpts (LoRaWAN 1.1).
	EncryptedFopts bool `protobuf:"varint,8,opt,name=encrypted_fopts,json=encryptedFopts,proto3" json:"encrypted_fopts,omitempty"`
	// Network session encryption key (for FOpts and FRMPayload mac-commands).
	NwkSEncKey []byte `protobuf:"bytes,9,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// NFCntDown (for decrypting mac-commands).
	NFCntDown uint32 `protobuf:"varint,10,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// AFCntDown (for decrypting FRMPayload in case of Relay).
	AFCntDown uint32 `protobuf:"varint,11,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
	// DevEUI of relayed device.
	DevEuiRelayed []byte `protobuf:"bytes,12,opt,name=dev_eui_relayed,json=devEuiRelayed,proto3" json:"dev_eui_relayed,omitempty"`
}

func (x *DownlinkFrame) Reset() {
	*x = DownlinkFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkFrame) ProtoMessage() {}

func (x *DownlinkFrame) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkFrame.ProtoReflect.Descriptor instead.
func (*DownlinkFrame) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{8}
}

func (x *DownlinkFrame) GetDownlinkId() uint32 {
	if x != nil {
		return x.DownlinkId
	}
	return 0
}

func (x *DownlinkFrame) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DownlinkFrame) GetDeviceQueueItemId() []byte {
	if x != nil {
		return x.DeviceQueueItemId
	}
	return nil
}

func (x *DownlinkFrame) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

func (x *DownlinkFrame) GetMulticastGroupQueueItemId() []byte {
	if x != nil {
		return x.MulticastGroupQueueItemId
	}
	return nil
}

func (x *DownlinkFrame) GetDownlinkFrame() *gw.DownlinkFrame {
	if x != nil {
		return x.DownlinkFrame
	}
	return nil
}

func (x *DownlinkFrame) GetEncryptedFopts() bool {
	if x != nil {
		return x.EncryptedFopts
	}
	return false
}

func (x *DownlinkFrame) GetNwkSEncKey() []byte {
	if x != nil {
		return x.NwkSEncKey
	}
	return nil
}

func (x *DownlinkFrame) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DownlinkFrame) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DownlinkFrame) GetDevEuiRelayed() []byte {
	if x != nil {
		return x.DevEuiRelayed
	}
	return nil
}

type LoraCloudGeolocBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uplinks in buffer.
	Uplinks []*LoraCloudGeolocBufferUplink `protobuf:"bytes,1,rep,name=uplinks,proto3" json:"uplinks,omitempty"`
}

func (x *LoraCloudGeolocBuffer) Reset() {
	*x = LoraCloudGeolocBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraCloudGeolocBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraCloudGeolocBuffer) ProtoMessage() {}

func (x *LoraCloudGeolocBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraCloudGeolocBuffer.ProtoReflect.Descriptor instead.
func (*LoraCloudGeolocBuffer) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{9}
}

func (x *LoraCloudGeolocBuffer) GetUplinks() []*LoraCloudGeolocBufferUplink {
	if x != nil {
		return x.Uplinks
	}
	return nil
}

type LoraCloudGeolocBufferUplink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RxInfo set for a single uplink.
	RxInfo []*gw.UplinkRxInfo `protobuf:"bytes,1,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
}

func (x *LoraCloudGeolocBufferUplink) Reset() {
	*x = LoraCloudGeolocBufferUplink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoraCloudGeolocBufferUplink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoraCloudGeolocBufferUplink) ProtoMessage() {}

func (x *LoraCloudGeolocBufferUplink) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoraCloudGeolocBufferUplink.ProtoReflect.Descriptor instead.
func (*LoraCloudGeolocBufferUplink) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{10}
}

func (x *LoraCloudGeolocBufferUplink) GetRxInfo() []*gw.UplinkRxInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

type PassiveRoamingDeviceSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session ID (UUID).
	// Unfortunately we can not use the DevEUI as unique identifier
	// as the PRStartAns DevEUI field is optional.
	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// NetID of the hNS.
	NetId []byte `protobuf:"bytes,2,opt,name=net_id,json=netId,proto3" json:"net_id,omitempty"`
	// DevAddr of the device.
	DevAddr []byte `protobuf:"bytes,3,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// DevEUI of the device (optional).
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// LoRaWAN 1.1.
	Lorawan_1_1 bool `protobuf:"varint,5,opt,name=lorawan_1_1,json=lorawan11,proto3" json:"lorawan_1_1,omitempty"`
	// LoRaWAN 1.0 NwkSKey / LoRaWAN 1.1 FNwkSIntKey.
	FNwkSIntKey []byte `protobuf:"bytes,6,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// Lifetime.
	Lifetime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,8,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// Validate MIC.
	ValidateMic bool `protobuf:"varint,9,opt,name=validate_mic,json=validateMic,proto3" json:"validate_mic,omitempty"`
}

func (x *PassiveRoamingDeviceSession) Reset() {
	*x = PassiveRoamingDeviceSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_internal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassiveRoamingDeviceSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveRoamingDeviceSession) ProtoMessage() {}

func (x *PassiveRoamingDeviceSession) ProtoReflect() protoreflect.Message {
	mi := &file_internal_internal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveRoamingDeviceSession.ProtoReflect.Descriptor instead.
func (*PassiveRoamingDeviceSession) Descriptor() ([]byte, []int) {
	return file_internal_internal_proto_rawDescGZIP(), []int{11}
}

func (x *PassiveRoamingDeviceSession) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetNetId() []byte {
	if x != nil {
		return x.NetId
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetLorawan_1_1() bool {
	if x != nil {
		return x.Lorawan_1_1
	}
	return false
}

func (x *PassiveRoamingDeviceSession) GetFNwkSIntKey() []byte {
	if x != nil {
		return x.FNwkSIntKey
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetLifetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *PassiveRoamingDeviceSession) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *PassiveRoamingDeviceSession) GetValidateMic() bool {
	if x != nil {
		return x.ValidateMic
	}
	return false
}

var File_internal_internal_proto protoreflect.FileDescriptor

var file_internal_internal_proto_rawDesc = []byte{
	0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x77, 0x2f, 0x67, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x10, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0f, 0x66, 0x5f, 0x6e, 0x77,
	0x6b, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x66, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x0f, 0x73, 0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0d, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x77, 0x6b,
	0x53, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x11, 0x6a, 0x73, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6a, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1f, 0x0a,
	0x0c, 0x6e, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1f,
	0x0a, 0x0c, 0x61, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x1c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x43, 0x6e,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x31, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78, 0x31, 0x44,
	0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x32, 0x5f, 0x64,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x32, 0x44, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2e,
	0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x72, 0x12, 0x32,
	0x0a, 0x16, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x46, 0x72,
	0x65, 0x71, 0x12, 0x2e, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x5f, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x62, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x4e, 0x62, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x64, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x69, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5a, 0x0a, 0x1d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6a, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x12, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x64, 0x72, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x64, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x41, 0x64, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x17, 0x6d,
	0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x6d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x30, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x12, 0x35, 0x0a, 0x17, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x34, 0x30, 0x30, 0x6d, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x34, 0x30, 0x30, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x34,
	0x30, 0x30, 0x6d, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x34, 0x30, 0x30,
	0x6d, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x69, 0x72, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x45, 0x69, 0x72, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52,
	0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x1a, 0x66, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x72, 0x61, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47,
	0x0a, 0x19, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x41, 0x64, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x53, 0x6e, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x73, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x52, 0x73, 0x73, 0x69, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa0, 0x08, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x72, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x72, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x64, 0x5f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x64, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x65,
	0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x1a, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x07, 0x77,
	0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x46,
	0x43, 0x6e, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x69,
	0x6e, 0x45, 0x75, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x77, 0x6f, 0x72, 0x5f, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x6f, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x4a, 0x0a, 0x14, 0x77, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x77, 0x46, 0x43,
	0x6e, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x22, 0x62, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x44, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x61, 0x78, 0x44, 0x72, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9a,
	0x02, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x73, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6c, 0x6f, 0x72, 0x61, 0x53, 0x6e, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x74, 0x65,
	0x6e, 0x6e, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e,
	0x6e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x55, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xda, 0x03, 0x0a, 0x0d,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x77, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0d, 0x6e,
	0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x77, 0x6b, 0x53, 0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0c, 0x6e, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12,
	0x1f, 0x0a, 0x0c, 0x61, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x45, 0x75,
	0x69, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x58, 0x0a, 0x15, 0x4c, 0x6f, 0x72, 0x61,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x6f,
	0x72, 0x61, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x22, 0x48, 0x0a, 0x1b, 0x4c, 0x6f, 0x72, 0x61, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47,
	0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc2, 0x02, 0x0a,
	0x1b, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x6f, 0x72, 0x61, 0x77, 0x61,
	0x6e, 0x5f, 0x31, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x72,
	0x61, 0x77, 0x61, 0x6e, 0x31, 0x31, 0x12, 0x24, 0x0a, 0x0f, 0x66, 0x5f, 0x6e, 0x77, 0x6b, 0x5f,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x66, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x63, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x34, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_internal_proto_rawDescOnce sync.Once
	file_internal_internal_proto_rawDescData = file_internal_internal_proto_rawDesc
)

func file_internal_internal_proto_rawDescGZIP() []byte {
	file_internal_internal_proto_rawDescOnce.Do(func() {
		file_internal_internal_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_internal_proto_rawDescData)
	})
	return file_internal_internal_proto_rawDescData
}

var file_internal_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_internal_internal_proto_goTypes = []interface{}{
	(*DeviceSession)(nil),               // 0: internal.DeviceSession
	(*UplinkAdrHistory)(nil),            // 1: internal.UplinkAdrHistory
	(*Relay)(nil),                       // 2: internal.Relay
	(*RelayDevice)(nil),                 // 3: internal.RelayDevice
	(*RelayFilter)(nil),                 // 4: internal.RelayFilter
	(*DeviceSessionChannel)(nil),        // 5: internal.DeviceSessionChannel
	(*DeviceGatewayRxInfo)(nil),         // 6: internal.DeviceGatewayRxInfo
	(*DeviceGatewayRxInfoItem)(nil),     // 7: internal.DeviceGatewayRxInfoItem
	(*DownlinkFrame)(nil),               // 8: internal.DownlinkFrame
	(*LoraCloudGeolocBuffer)(nil),       // 9: internal.LoraCloudGeolocBuffer
	(*LoraCloudGeolocBufferUplink)(nil), // 10: internal.LoraCloudGeolocBufferUplink
	(*PassiveRoamingDeviceSession)(nil), // 11: internal.PassiveRoamingDeviceSession
	nil,                                 // 12: internal.DeviceSession.ExtraUplinkChannelsEntry
	nil,                                 // 13: internal.DeviceSession.MacCommandErrorCountEntry
	(common.MacVersion)(0),              // 14: common.MacVersion
	(*common.KeyEnvelope)(nil),          // 15: common.KeyEnvelope
	(*timestamppb.Timestamp)(nil),       // 16: google.protobuf.Timestamp
	(*gw.DownlinkFrame)(nil),            // 17: gw.DownlinkFrame
	(*gw.UplinkRxInfo)(nil),             // 18: gw.UplinkRxInfo
}
var file_internal_internal_proto_depIdxs = []int32{
	14, // 0: internal.DeviceSession.mac_version:type_name -> common.MacVersion
	15, // 1: internal.DeviceSession.app_s_key:type_name -> common.KeyEnvelope
	12, // 2: internal.DeviceSession.extra_uplink_channels:type_name -> internal.DeviceSession.ExtraUplinkChannelsEntry
	0,  // 3: internal.DeviceSession.pending_rejoin_device_session:type_name -> internal.DeviceSession
	1,  // 4: internal.DeviceSession.uplink_adr_history:type_name -> internal.UplinkAdrHistory
	13, // 5: internal.DeviceSession.mac_command_error_count:type_name -> internal.DeviceSession.MacCommandErrorCountEntry
	16, // 6: internal.DeviceSession.last_device_status_request:type_name -> google.protobuf.Timestamp
	2,  // 7: internal.DeviceSession.relay:type_name -> internal.Relay
	3,  // 8: internal.Relay.devices:type_name -> internal.RelayDevice
	4,  // 9: internal.Relay.filters:type_name -> internal.RelayFilter
	16, // 10: internal.RelayDevice.w_f_cnt_last_request:type_name -> google.protobuf.Timestamp
	7,  // 11: internal.DeviceGatewayRxInfo.items:type_name -> internal.DeviceGatewayRxInfoItem
	17, // 12: internal.DownlinkFrame.downlink_frame:type_name -> gw.DownlinkFrame
	10, // 13: internal.LoraCloudGeolocBuffer.uplinks:type_name -> internal.LoraCloudGeolocBufferUplink
	18, // 14: internal.LoraCloudGeolocBufferUplink.rx_info:type_name -> gw.UplinkRxInfo
	16, // 15: internal.PassiveRoamingDeviceSession.lifetime:type_name -> google.protobuf.Timestamp
	5,  // 16: internal.DeviceSession.ExtraUplinkChannelsEntry.value:type_name -> internal.DeviceSessionChannel
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_internal_internal_proto_init() }
func file_internal_internal_proto_init() {
	if File_internal_internal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_internal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkAdrHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayRxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayRxInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraCloudGeolocBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoraCloudGeolocBufferUplink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_internal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassiveRoamingDeviceSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_internal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_internal_proto_goTypes,
		DependencyIndexes: file_internal_internal_proto_depIdxs,
		MessageInfos:      file_internal_internal_proto_msgTypes,
	}.Build()
	File_internal_internal_proto = out.File
	file_internal_internal_proto_rawDesc = nil
	file_internal_internal_proto_goTypes = nil
	file_internal_internal_proto_depIdxs = nil
}
